import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, q as text, h as space, c as claim_element, a as children, j as claim_text, d as detach, b as attr, f as insert, r as append, D as set_data, n as noop } from './chunk.19600e5a.js';

/* test/apps/preloading/src/routes/echo/index.svelte generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var pre, t0_value = JSON.stringify(ctx.query), t0, t1, a0, t2, t3, a1, t4, t5, a2, t6;

	return {
		c() {
			pre = element("pre");
			t0 = text(t0_value);
			t1 = space();
			a0 = element("a");
			t2 = text("foo=1");
			t3 = space();
			a1 = element("a");
			t4 = text("foo=2");
			t5 = space();
			a2 = element("a");
			t6 = text("foo=3");
			this.h();
		},

		l(nodes) {
			pre = claim_element(nodes, "PRE", {}, false);
			var pre_nodes = children(pre);

			t0 = claim_text(pre_nodes, t0_value);
			pre_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n");

			a0 = claim_element(nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			t2 = claim_text(a0_nodes, "foo=1");
			a0_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n");

			a1 = claim_element(nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			t4 = claim_text(a1_nodes, "foo=2");
			a1_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n");

			a2 = claim_element(nodes, "A", { href: true }, false);
			var a2_nodes = children(a2);

			t6 = claim_text(a2_nodes, "foo=3");
			a2_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a0, "href", "echo?foo=1");
			attr(a1, "href", "echo?foo=2");
			attr(a2, "href", "echo?foo=3");
		},

		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t0);
			insert(target, t1, anchor);
			insert(target, a0, anchor);
			append(a0, t2);
			insert(target, t3, anchor);
			insert(target, a1, anchor);
			append(a1, t4);
			insert(target, t5, anchor);
			insert(target, a2, anchor);
			append(a2, t6);
		},

		p(changed, ctx) {
			if ((changed.query) && t0_value !== (t0_value = JSON.stringify(ctx.query))) {
				set_data(t0, t0_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(pre);
				detach(t1);
				detach(a0);
				detach(t3);
				detach(a1);
				detach(t5);
				detach(a2);
			}
		}
	};
}

function preload(page) {
	return {
		query: page.query
	};
}

function instance($$self, $$props, $$invalidate) {
	let { query } = $$props;

	$$self.$set = $$props => {
		if ('query' in $$props) $$invalidate('query', query = $$props.query);
	};

	return { query };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["query"]);
	}
}

export default Index;
export { preload };
