(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1589755243159;

	const files = [
		"service-worker-index.html"
	];

	const shell = [
		"client/chunk.19600e5a.js",
		"client/chunk.17996ab4.js",
		"client/client.3bacd010.js",
		"client/index.d85cc937.js",
		"client/index.1b8c924e.js",
		"client/custom-class.6b875347.js",
		"client/host.468fcbbb.js",
		"client/set.24de57a9.js",
		"client/index.32842774.js",
		"client/slow-preload.0e42e270.js",
		"client/index.0251ed17.js",
		"client/index.b5e7cf08.js",
		"client/index.57ed6960.js",
		"client/foo.4eda6653.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by webpack,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET') return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve assets and webpack-generated files from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
