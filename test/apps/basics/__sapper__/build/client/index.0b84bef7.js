import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, f as space, h as claim_element, j as children, k as claim_text, l as detach, B as attr, m as insert, o as append, E as set_data, n as noop, F as subscribe } from './chunk.68ae2c07.js';
import { b as stores$1 } from './chunk.ef0dad12.js';

/* test/apps/basics/src/routes/[...rest]/index.svelte generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t0_value = ctx.$page.params.rest.join(','), t0, t1, h2, t2_value = ctx.rest.join(','), t2, t3, a0, t4, t5, a1, t6, t7, a2, t8, t9, a3, t10;

	return {
		c() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			h2 = element("h2");
			t2 = text(t2_value);
			t3 = space();
			a0 = element("a");
			t4 = text("deep");
			t5 = space();
			a1 = element("a");
			t6 = text("deep");
			t7 = space();
			a2 = element("a");
			t8 = text("deep");
			t9 = space();
			a3 = element("a");
			t10 = text("deep");
			this.h();
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, t0_value);
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n");

			h2 = claim_element(nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, t2_value);
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n");

			a0 = claim_element(nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			t4 = claim_text(a0_nodes, "deep");
			a0_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n");

			a1 = claim_element(nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			t6 = claim_text(a1_nodes, "deep");
			a1_nodes.forEach(detach);
			t7 = claim_text(nodes, "\n");

			a2 = claim_element(nodes, "A", { href: true }, false);
			var a2_nodes = children(a2);

			t8 = claim_text(a2_nodes, "deep");
			a2_nodes.forEach(detach);
			t9 = claim_text(nodes, "\n");

			a3 = claim_element(nodes, "A", { href: true }, false);
			var a3_nodes = children(a3);

			t10 = claim_text(a3_nodes, "deep");
			a3_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a0, "href", "xyz/abc/deep");
			attr(a1, "href", "xyz/abc");
			attr(a2, "href", "xyz/abc/def");
			attr(a3, "href", "xyz/abc/def/ghi");
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, a0, anchor);
			append(a0, t4);
			insert(target, t5, anchor);
			insert(target, a1, anchor);
			append(a1, t6);
			insert(target, t7, anchor);
			insert(target, a2, anchor);
			append(a2, t8);
			insert(target, t9, anchor);
			insert(target, a3, anchor);
			append(a3, t10);
		},

		p(changed, ctx) {
			if ((changed.$page) && t0_value !== (t0_value = ctx.$page.params.rest.join(','))) {
				set_data(t0, t0_value);
			}

			if ((changed.rest) && t2_value !== (t2_value = ctx.rest.join(','))) {
				set_data(t2, t2_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(a0);
				detach(t5);
				detach(a1);
				detach(t7);
				detach(a2);
				detach(t9);
				detach(a3);
			}
		}
	};
}

function preload({ query, params }) {
	const { rest } = params;
	return { rest };
}

function instance($$self, $$props, $$invalidate) {
	let $page;

	const { page } = stores$1(); subscribe($$self, page, $$value => { $page = $$value; $$invalidate('$page', $page); });
	let { rest } = $$props;

	$$self.$set = $$props => {
		if ('rest' in $$props) $$invalidate('rest', rest = $$props.rest);
	};

	return { page, rest, $page };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["rest"]);
	}
}

export default Index;
export { preload };
