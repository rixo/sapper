import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, f as space, h as claim_element, j as children, k as claim_text, l as detach, B as attr, m as insert, o as append, E as set_data, n as noop, D as onMount, G as onDestroy } from './chunk.68ae2c07.js';
import { b as stores$1 } from './chunk.ef0dad12.js';

/* test/apps/basics/src/routes/store/index.svelte generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t0, t1, h2, t2, t3, t4, t5, a, t6;

	return {
		c() {
			h1 = element("h1");
			t0 = text("Test");
			t1 = space();
			h2 = element("h2");
			t2 = text("Called ");
			t3 = text(ctx.call_count);
			t4 = text(" time");
			t5 = space();
			a = element("a");
			t6 = text("results");
			this.h();
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Test");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n");

			h2 = claim_element(nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Called ");
			t3 = claim_text(h2_nodes, ctx.call_count);
			t4 = claim_text(h2_nodes, " time");
			h2_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n");

			a = claim_element(nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t6 = claim_text(a_nodes, "results");
			a_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a, "href", "store/result");
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, t3);
			append(h2, t4);
			insert(target, t5, anchor);
			insert(target, a, anchor);
			append(a, t6);
		},

		p(changed, ctx) {
			if (changed.call_count) {
				set_data(t3, ctx.call_count);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t5);
				detach(a);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

	const { page, session } = stores$1();
	let call_count = 0;

	onMount(() => {
		session.set(call_count);
	});

	const unsubscribe = page.subscribe(() => {
		call_count++; $$invalidate('call_count', call_count);
		session.set(call_count);
	});

	onDestroy(() => {
		unsubscribe();
	});

	return { call_count };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;
