import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, f as space, h as claim_element, j as children, k as claim_text, l as detach, B as attr, m as insert, o as append, E as set_data, n as noop } from './chunk.68ae2c07.js';

/* test/apps/basics/src/routes/skipped/[one]/[two].svelte generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t0, t1, t2, t3, a, t4;

	return {
		c() {
			h1 = element("h1");
			t0 = text(ctx.one);
			t1 = text(":");
			t2 = text(ctx.two);
			t3 = space();
			a = element("a");
			t4 = text("skipped/y/1");
			this.h();
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, ctx.one);
			t1 = claim_text(h1_nodes, ":");
			t2 = claim_text(h1_nodes, ctx.two);
			h1_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n");

			a = claim_element(nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t4 = claim_text(a_nodes, "skipped/y/1");
			a_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a, "href", "skipped/y/1");
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			append(h1, t1);
			append(h1, t2);
			insert(target, t3, anchor);
			insert(target, a, anchor);
			append(a, t4);
		},

		p(changed, ctx) {
			if (changed.one) {
				set_data(t0, ctx.one);
			}

			if (changed.two) {
				set_data(t2, ctx.two);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t3);
				detach(a);
			}
		}
	};
}

function preload({ params }) {
	return params;
}

function instance($$self, $$props, $$invalidate) {
	let { one, two } = $$props;

	$$self.$set = $$props => {
		if ('one' in $$props) $$invalidate('one', one = $$props.one);
		if ('two' in $$props) $$invalidate('two', two = $$props.two);
	};

	return { one, two };
}

class Two extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["one", "two"]);
	}
}

export default Two;
export { preload };
