import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, h as claim_element, j as children, k as claim_text, l as detach, A as attr, m as insert, o as append, B as set_data, x as empty, n as noop, C as destroy_each } from './chunk.cf5f63ce.js';

/* test/apps/export-multiple-entry/src/routes/boom/[a]/index.svelte generated by Svelte v3.6.9 */

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.b = list[i];
	return child_ctx;
}

// (13:0) {#each list as b}
function create_each_block(ctx) {
	var a_1, t0, t1, t2_value = ctx.b, t2, a_1_href_value;

	return {
		c() {
			a_1 = element("a");
			t0 = text(ctx.a);
			t1 = text("/");
			t2 = text(t2_value);
			this.h();
		},

		l(nodes) {
			a_1 = claim_element(nodes, "A", { href: true }, false);
			var a_1_nodes = children(a_1);

			t0 = claim_text(a_1_nodes, ctx.a);
			t1 = claim_text(a_1_nodes, "/");
			t2 = claim_text(a_1_nodes, t2_value);
			a_1_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a_1, "href", a_1_href_value = "boom/" + ctx.a + "/" + ctx.b);
		},

		m(target, anchor) {
			insert(target, a_1, anchor);
			append(a_1, t0);
			append(a_1, t1);
			append(a_1, t2);
		},

		p(changed, ctx) {
			if (changed.a) {
				set_data(t0, ctx.a);
			}

			if ((changed.a) && a_1_href_value !== (a_1_href_value = "boom/" + ctx.a + "/" + ctx.b)) {
				attr(a_1, "href", a_1_href_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(a_1);
			}
		}
	};
}

function create_fragment(ctx) {
	var each_1_anchor;

	var each_value = ctx.list;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},

		p(changed, ctx) {
			if (changed.a || changed.list) {
				each_value = ctx.list;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

function preload({ params }) {
	return params;
}

function instance($$self, $$props, $$invalidate) {
	let { a } = $$props;

	const list = Array(20).fill().map((_, i) => i + 1);

	$$self.$set = $$props => {
		if ('a' in $$props) $$invalidate('a', a = $$props.a);
	};

	return { a, list };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["a"]);
	}
}

export default Index;
export { preload };
