import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, h as claim_element, j as children, k as claim_text, l as detach, A as attr, m as insert, o as append, B as set_data, n as noop } from './chunk.1def16bf.js';

/* test/apps/export-queue/src/routes/a-[x].svelte generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var a, t0, t1, a_href_value;

	return {
		c() {
			a = element("a");
			t0 = text("b-");
			t1 = text(ctx.x);
			this.h();
		},

		l(nodes) {
			a = claim_element(nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t0 = claim_text(a_nodes, "b-");
			t1 = claim_text(a_nodes, ctx.x);
			a_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a, "href", a_href_value = "b-" + ctx.x);
		},

		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			append(a, t1);
		},

		p(changed, ctx) {
			if (changed.x) {
				set_data(t1, ctx.x);
			}

			if ((changed.x) && a_href_value !== (a_href_value = "b-" + ctx.x)) {
				attr(a, "href", a_href_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(a);
			}
		}
	};
}

function preload({ params }) {
	if (params.x === 'a') {
		return new Promise(resolve => setTimeout(resolve, 100));
	}

	return params;
}

function instance($$self, $$props, $$invalidate) {
	let { x } = $$props;

	$$self.$set = $$props => {
		if ('x' in $$props) $$invalidate('x', x = $$props.x);
	};

	return { x };
}

class A_x extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["x"]);
	}
}

export default A_x;
export { preload };
