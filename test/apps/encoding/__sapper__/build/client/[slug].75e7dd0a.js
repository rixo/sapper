import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, f as space, h as claim_element, j as children, k as claim_text, l as detach, m as insert, o as append, C as set_data, n as noop, D as subscribe } from './chunk.7ccdb5fe.js';
import { b as stores$1 } from './chunk.2f9c90c3.js';

/* test/apps/encoding/src/routes/echo/page/[slug].html generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t0, t1, t2_value = JSON.stringify(ctx.$page.query), t2;

	return {
		c() {
			h1 = element("h1");
			t0 = text(ctx.slug);
			t1 = space();
			t2 = text(t2_value);
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, ctx.slug);
			t1 = claim_text(h1_nodes, " ");
			t2 = claim_text(h1_nodes, t2_value);
			h1_nodes.forEach(detach);
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			append(h1, t1);
			append(h1, t2);
		},

		p(changed, ctx) {
			if (changed.slug) {
				set_data(t0, ctx.slug);
			}

			if ((changed.$page) && t2_value !== (t2_value = JSON.stringify(ctx.$page.query))) {
				set_data(t2, t2_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function preload({ params }) {
	return {
		slug: params.slug
	};
}

function instance($$self, $$props, $$invalidate) {
	let $page;

	const { page } = stores$1(); subscribe($$self, page, $$value => { $page = $$value; $$invalidate('$page', $page); });

	let { slug } = $$props;

	$$self.$set = $$props => {
		if ('slug' in $$props) $$invalidate('slug', slug = $$props.slug);
	};

	return { page, slug, $page };
}

class Slug extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["slug"]);
	}
}

export default Slug;
export { preload };
