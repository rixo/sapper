import { c as SvelteComponentDev, d as init, b as safe_not_equal, h as element, i as text, k as claim_element, l as children, m as claim_text, n as detach, o as add_location, p as insert, q as append, a as noop } from './chunk.035fae03.js';

/* src/routes/preload-reject.svelte generated by Svelte v3.2.2 */

const file = "src/routes/preload-reject.svelte";

function create_fragment(ctx) {
	var h1, t;

	return {
		c: function create() {
			h1 = element("h1");
			t = text("Test has failed");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t = claim_text(h1_nodes, "Test has failed");
			h1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(h1, file, 6, 0, 114);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function preload() {
    return Promise.reject(new Error('boom'))
}

class Preload_reject extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Preload_reject;
export { preload };
