import { c as SvelteComponentDev, d as init, b as safe_not_equal, h as element, i as text, k as claim_element, l as children, m as claim_text, n as detach, o as add_location, p as insert, q as append, r as set_data, a as noop } from './chunk.035fae03.js';

/* src/routes/blog/[slug].html generated by Svelte v3.2.2 */

const file = "src/routes/blog/[slug].html";

function create_fragment(ctx) {
	var h1, t_value = ctx.post.title, t;

	return {
		c: function create() {
			h1 = element("h1");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t = claim_text(h1_nodes, t_value);
			h1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(h1, file, 20, 0, 330);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},

		p: function update(changed, ctx) {
			if ((changed.post) && t_value !== (t_value = ctx.post.title)) {
				set_data(t, t_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function preload({ params }) {
	const { slug } = params;

	return this.fetch(`blog/${slug}.json`).then(r => {
		return r.json().then(data => {
			if (r.status !== 200) {
				this.error(r.status, data);
			}

			return data;
		});
	});
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;

	$$self.$set = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
	};

	return { post };
}

class Slug extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["post"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.post === undefined && !('post' in props)) {
			console.warn("<Slug> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<Slug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<Slug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Slug;
export { preload };
