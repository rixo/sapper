import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, h as claim_element, j as children, k as claim_text, l as detach, m as insert, o as append, p as set_data, n as noop } from './chunk.e83f0b4f.js';

/* test/apps/errors/src/routes/blog/[slug].html generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t_value = ctx.post.title, t;

	return {
		c() {
			h1 = element("h1");
			t = text(t_value);
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t = claim_text(h1_nodes, t_value);
			h1_nodes.forEach(detach);
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},

		p(changed, ctx) {
			if ((changed.post) && t_value !== (t_value = ctx.post.title)) {
				set_data(t, t_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function preload({ params }) {
	const { slug } = params;

	return this.fetch(`blog/${slug}.json`).then(r => {
		return r.json().then(data => {
			if (r.status !== 200) {
				this.error(r.status, data);
			}

			return data;
		});
	});
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;

	$$self.$set = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
	};

	return { post };
}

class Slug extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["post"]);
	}
}

export default Slug;
export { preload };
