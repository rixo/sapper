import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, h as claim_element, j as children, k as claim_text, l as detach, A as attr, m as insert, o as append, f as space, B as set_style, n as noop, C as onMount } from './chunk.a73445d0.js';

/* test/apps/scroll/src/routes/tall-page.svelte generated by Svelte v3.6.9 */

// (19:1) {#if barLink}
function create_if_block(ctx) {
	var a, t;

	return {
		c() {
			a = element("a");
			t = text("link");
			this.h();
		},

		l(nodes) {
			a = claim_element(nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t = claim_text(a_nodes, "link");
			a_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a, "href", "another-tall-page#bar");
		},

		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},

		d(detaching) {
			if (detaching) {
				detach(a);
			}
		}
	};
}

function create_fragment(ctx) {
	var h1, t0, t1, a0, t2, t3, div0, t4, div1, a1, t5, t6, a2, t7, t8;

	var if_block = (ctx.barLink) && create_if_block();

	return {
		c() {
			h1 = element("h1");
			t0 = text("A tall page");
			t1 = space();
			a0 = element("a");
			t2 = text("scroll to foo");
			t3 = space();
			div0 = element("div");
			t4 = space();
			div1 = element("div");
			a1 = element("a");
			t5 = text("link");
			t6 = space();
			a2 = element("a");
			t7 = text("link");
			t8 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "A tall page");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n");

			a0 = claim_element(nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			t2 = claim_text(a0_nodes, "scroll to foo");
			a0_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n");

			div0 = claim_element(nodes, "DIV", { style: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n\n");

			div1 = claim_element(nodes, "DIV", { id: true }, false);
			var div1_nodes = children(div1);

			a1 = claim_element(div1_nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			t5 = claim_text(a1_nodes, "link");
			a1_nodes.forEach(detach);
			t6 = claim_text(div1_nodes, "\n\t");

			a2 = claim_element(div1_nodes, "A", { href: true, "sapper-noscroll": true }, false);
			var a2_nodes = children(a2);

			t7 = claim_text(a2_nodes, "link");
			a2_nodes.forEach(detach);
			t8 = claim_text(div1_nodes, "\n\t");
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a0, "href", "tall-page#foo");
			set_style(div0, "height", "9999px");
			attr(a1, "href", "another-tall-page");
			attr(a2, "href", "another-tall-page");
			attr(a2, "sapper-noscroll", "");
			attr(div1, "id", "foo");
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, a0, anchor);
			append(a0, t2);
			insert(target, t3, anchor);
			insert(target, div0, anchor);
			insert(target, t4, anchor);
			insert(target, div1, anchor);
			append(div1, a1);
			append(a1, t5);
			append(div1, t6);
			append(div1, a2);
			append(a2, t7);
			append(div1, t8);
			if (if_block) if_block.m(div1, null);
		},

		p(changed, ctx) {
			if (ctx.barLink) {
				if (!if_block) {
					if_block = create_if_block();
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(a0);
				detach(t3);
				detach(div0);
				detach(t4);
				detach(div1);
			}

			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { barLink = false } = $$props;

	onMount(() => {
		$$invalidate('barLink', barLink = true);
	});

	$$self.$set = $$props => {
		if ('barLink' in $$props) $$invalidate('barLink', barLink = $$props.barLink);
	};

	return { barLink };
}

class Tall_page extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["barLink"]);
	}
}

export default Tall_page;
