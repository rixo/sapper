import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, f as space, h as claim_element, j as children, k as claim_text, l as detach, D as attr, m as insert, o as append, B as set_data, n as noop, C as subscribe } from './chunk.d4046557.js';
import { b as stores$1 } from './chunk.e787e967.js';
import { c as counts } from './chunk.4b200f2f.js';

/* test/apps/layout/src/routes/[x]/[y]/[z].svelte generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var span, t0, t1_value = ctx.$page.params.z, t1, t2, t3, t4, a0, t5, t6, a1, t7;

	return {
		c() {
			span = element("span");
			t0 = text("z: ");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(ctx.count);
			t4 = space();
			a0 = element("a");
			t5 = text("goto foo/bar/qux");
			t6 = space();
			a1 = element("a");
			t7 = text("goto foo/abc/def");
			this.h();
		},

		l(nodes) {
			span = claim_element(nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, "z: ");
			t1 = claim_text(span_nodes, t1_value);
			t2 = claim_text(span_nodes, " ");
			t3 = claim_text(span_nodes, ctx.count);
			span_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n");

			a0 = claim_element(nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			t5 = claim_text(a0_nodes, "goto foo/bar/qux");
			a0_nodes.forEach(detach);
			t6 = claim_text(nodes, "\n");

			a1 = claim_element(nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "goto foo/abc/def");
			a1_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(a0, "href", "foo/bar/qux");
			attr(a1, "href", "foo/abc/def");
		},

		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
			append(span, t2);
			append(span, t3);
			insert(target, t4, anchor);
			insert(target, a0, anchor);
			append(a0, t5);
			insert(target, t6, anchor);
			insert(target, a1, anchor);
			append(a1, t7);
		},

		p(changed, ctx) {
			if ((changed.$page) && t1_value !== (t1_value = ctx.$page.params.z)) {
				set_data(t1, t1_value);
			}

			if (changed.count) {
				set_data(t3, ctx.count);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(span);
				detach(t4);
				detach(a0);
				detach(t6);
				detach(a1);
			}
		}
	};
}

function preload() {
	return {
		count: counts.z += 1
	};
}

function instance($$self, $$props, $$invalidate) {
	let $page;

	const { page } = stores$1(); subscribe($$self, page, $$value => { $page = $$value; $$invalidate('$page', $page); });

	let { count } = $$props;

	$$self.$set = $$props => {
		if ('count' in $$props) $$invalidate('count', count = $$props.count);
	};

	return { page, count, $page };
}

class Z extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["count"]);
	}
}

export default Z;
export { preload };
