import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, h as claim_element, j as children, k as claim_text, l as detach, m as insert, o as append, p as set_data, n as noop } from './chunk.9d7d1ac7.js';

/* test/apps/ignore/src/routes/b/index.html generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t;

	return {
		c() {
			h1 = element("h1");
			t = text(ctx.letter);
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t = claim_text(h1_nodes, ctx.letter);
			h1_nodes.forEach(detach);
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},

		p(changed, ctx) {
			if (changed.letter) {
				set_data(t, ctx.letter);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function preload() {
	return this.fetch('b.json').then(r => r.json()).then(letter => {
		return { letter };
	});
}

function instance($$self, $$props, $$invalidate) {
	let { letter } = $$props;

	$$self.$set = $$props => {
		if ('letter' in $$props) $$invalidate('letter', letter = $$props.letter);
	};

	return { letter };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["letter"]);
	}
}

export default Index;
export { preload };
