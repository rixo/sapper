import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, d as text, h as claim_element, j as children, k as claim_text, l as detach, m as insert, o as append, B as set_data, n as noop } from './chunk.1def16bf.js';

/* test/apps/credentials/src/routes/credentials/index.html generated by Svelte v3.6.9 */

function create_fragment(ctx) {
	var h1, t;

	return {
		c() {
			h1 = element("h1");
			t = text(ctx.message);
		},

		l(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t = claim_text(h1_nodes, ctx.message);
			h1_nodes.forEach(detach);
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},

		p(changed, ctx) {
			if (changed.message) {
				set_data(t, ctx.message);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function preload({ query }) {
	return this.fetch(`credentials/test.json`, {
		credentials: query.creds
	}).then(r => r.json());
}

function instance($$self, $$props, $$invalidate) {
	let { message } = $$props;

	$$self.$set = $$props => {
		if ('message' in $$props) $$invalidate('message', message = $$props.message);
	};

	return { message };
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["message"]);
	}
}

export default Index;
export { preload };
